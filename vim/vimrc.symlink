set nocompatible
set encoding=utf-8

" For Windowz
if has('win32') || has('win64')
	set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
endif

" Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
set ttyfast

Bundle 'gmarik/vundle'
" Utilities & Add-Ons
Bundle 'Valloric/YouCompleteMe'
Bundle 'SirVer/ultisnips'
Bundle 'scrooloose/syntastic'
Bundle 'scrooloose/nerdtree'
Bundle 'kien/ctrlp.vim'
Bundle 'mileszs/ack.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-commentary'
Bundle 'airblade/vim-gitgutter'
Bundle 'vim-scripts/kwbdi.vim'
Bundle 'vim-scripts/Auto-Pairs'
Bundle 'bling/vim-airline'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'majutsushi/tagbar'
" Colors
Bundle 'skwp/vim-colors-solarized'
" html/css
Bundle 'Valloric/MatchTagAlways'
" php
Bundle 'shawncplus/phpcomplete.vim'
" ruby
Bundle 'vim-ruby/vim-ruby'

" Filetypes & Syntax Highlighting
Bundle 'othree/html5.vim'
Bundle 'tpope/vim-haml'
Bundle 'vim-scripts/JSON.vim'
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'kchmck/vim-coffee-script'
Bundle 'vim-scripts/jade.vim'
Bundle 'slim-template/vim-slim'
Bundle 'jtratner/vim-flavored-markdown'
Bundle 'jnwhiteh/vim-golang'
Bundle 'StanAngeloff/php.vim'
Bundle 'wavded/vim-stylus'
Bundle 'juvenn/mustache.vim'
Bundle 'nono/vim-handlebars'
Bundle "lepture/vim-jinja"

" Experimental
Bundle 'tpope/vim-endwise'
Bundle 'austintaylor/vim-indentobject'

" ----------------------------------------------------------------------------
"  Colors
" ----------------------------------------------------------------------------
syntax enable
set background=dark
colorscheme Tomorrow-Night

filetype plugin indent on

" ----------------------------------------------------------------------------
"  VIM Settings
" ----------------------------------------------------------------------------
"
set noswapfile
set nobackup
set splitright
set splitbelow
set autowrite
set autoread
set laststatus=2
if exists('+undodir')
	set undodir=~/.backups
endif
if exists('+undofile')
	set undofile
endif

set fileformats=unix,dos,mac

set history=50
set clipboard=unnamed
set notimeout
set ttimeout
set ttimeoutlen=10
set mouse=a
set ttymouse=xterm2
set ttyfast
set magic
set hidden

" ----------------------------------------------------------------------------
"  Visual Settings
" ----------------------------------------------------------------------------

set noerrorbells
set novisualbell
set number
set backspace=indent,eol,start
set showcmd
set showmode

set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase

set autoindent
set expandtab
set smarttab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set shiftround
set linebreak
set formatoptions+=n       " support for numbered/bullet lists
set virtualedit=block      " allow virtual edit in visual block ..
set nofoldenable           " dont fold by default
set laststatus=2           " always show the status line

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:·

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler
set nolazyredraw           " turn off lazy redraw
set wildmode=list:longest,full
set wildignore+=*/.hg/*,*/.svn/*,*/vendor/cache/*,*/public/system/*,*/tmp/*,*/log/*,*/.git/*,*/.jhw-cache/*,*/solr/data/*,*/node_modules/*,*/.DS_Store
set cursorline cursorcolumn     " Highlight current line and column
autocmd WinLeave * setlocal nocursorline
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorcolumn
autocmd WinEnter * setlocal cursorcolumn

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" sane window movement
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" sane window creation
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

" Toggle NERDTree
map <C-d> :NERDTreeToggle<CR>
nmap <leader>f :NERDTreeFind<CR>

" goto buffer
nmap <C-b> :CtrlPBuffer<cr>
imap <C-b> <esc>:CtrlPBuffer<cr>

" goto symbol
nmap <C-r> :CtrlPBufTag<cr>
imap <C-r> <esc>:CtrlPBufTag<cr>
nmap <C-R> :CtrlPBufTagAll<cr>
imap <C-R> <esc>:CtrlPBufTagAll<cr>

" goto file
nmap <C-t> :CtrlP<cr>
imap <C-t> <esc>:CtrlP<cr>

" project search
nmap <leader>a :Ack

" toggle tagbar
nmap <leader>] :TagbarToggle<cr>

" (c)lose buffer
nmap <leader>c <Plug>Kwbd

" Fixing search
nnoremap / /\v
vnoremap / /\v
nmap <silent> // :nohlsearch<cr>

"(v)im (r)eload
nmap <silent> <leader>vr :so %<cr>

" Semicolon at end of line by typing ;;
inoremap ;; <C-o>A;<esc>

" w!! to write a file as sudo
" stolen from Steve Losh
cmap w!! w !sudo tee % >/dev/null

" Remove trailing whitespace and ^M
nnoremap <leader>sn :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))

" ---------------------------------------------------------------------------
"  Plugin settings
" ---------------------------------------------------------------------------

" Airline
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_max_height = 10
let g:ctrlp_switch_buffer = 'et'
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_mruf_max = 250
let g:ctrlp_match_window = 'order:ttb,max:20'

let g:ctrlp_buftag_types = {
\ 'go'         : '--language-force=go --golang-types=ftv',
\ 'coffee'     : '--language-force=coffee --coffee-types=cmfvf',
\ 'markdown'   : '--language-force=markdown --markdown-types=hik',
\ 'objc'       : '--language-force=objc --objc-types=mpci',
\ 'rc'         : '--language-force=rust --rust-types=fTm'
\ }

let g:ycm_autoclose_preview_window_after_completion = 1

" Make nerdtree look nice
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30

let g:NERDSpaceDelims=1

" Don't auto open nerd tree on startup
let g:nerdtree_tabs_open_on_gui_startup = 0
" Focus in the main content window
let g:nerdtree_tabs_focus_on_files = 1

" Syntastic Config
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'

" Ultisnips
function! g:UltiSnips_Complete()
	call UltiSnips_ExpandSnippet()
	if g:ulti_expand_res == 0
		if pumvisible()
			return "\<C-n>"
		else
			call UltiSnips_JumpForwards()
			if g:ulti_jump_forwards_res == 0
			 return "\<TAB>"
			endif
		endif
	endif
	return ""
endfunction
au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"


" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
	let g:ackprg = 'ag --nogroup --column'
	" Use Ag over Grep
	set grepprg=ag\ --nogroup\ --nocolor
	" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
	let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif


" Fix Cursor in TMUX
if exists('$TMUX')
	let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
	let &t_SI = "\<Esc>]50;CursorShape=1\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" ---------------------------------------------------------------------------
"  Auto cmd stuff for file types
" ---------------------------------------------------------------------------

if has("autocmd")
	autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
	autocmd FileType mkd,txt setlocal wrap linebreak nolist
endif

au BufNewFile,BufRead *.twig set ft=jinja

augroup markdown
	au!
	au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END
