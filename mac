#!/bin/sh

# set up vars
notify() { echo "-----> $1"; }
info()   { echo "       $1"; }

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

notify "âœ¨  Doing stuff âœ¨"

brew_ensure() {
  for pkg in "$@"; do
    if [[ -z $(brew list "$pkg" 2>/dev/null) ]]; then
      notify "Installing $pkg"
      brew install $pkg
    else
      if [[ -n $(brew outdated "$pkg" 2>/dev/null) ]]; then
        notify "Upgrading $pkg"
        brew upgrade $pkg
        brew cleanup $pkg
      fi
    fi
  done
}

cask_ensure() {
  for pkg in "$@"; do
    if [[ -z $(brew cask list "$pkg" 2>/dev/null) ]]; then
      notify "Installing $pkg"
      brew cask install $pkg
    fi
  done
}

# configure .gitconfig
# from holman/dotfiles
if ! [ -f gitconfig ]; then
  notify "Configuring your .gitconfig"
  git_credential='osxkeychain'

  info "What is your git author name?"
  read -e git_authorname
  info "What is your git author email?"
  read -e git_authoremail

  sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" gitconfig.example > gitconfig
fi

# load zsh
if [[ $SHELL != $(which zsh) ]]; then
  notify "Changing shell to zsh"
  chsh -s $(which zsh)
fi

# install vim-plug
if [[ ! -f "$HOME/.nvim/autoload/plug.vim" ]]; then
  notify "Installing Plug"
  curl -fLo "$HOME/.config/nvim/autoload/plug.vim" --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

# install brew
if ! hash brew 2>/dev/null; then
  notify "Installing homebrew"
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi
notify "Updating homebrew forumlas"
brew update

# install brew-cask
brew tap caskroom/cask

# install rcm
brew_ensure thoughtbot/formulae/rcm

if [[ -d $HOME/dotfiles ]]; then
  notify "Running rcup for your dotfiles"
  env RCRC=$HOME/dotfiles/rcrc rcup
fi

# Install antobody for zsh plugins
brew_ensure getantibody/tap/antibody

# applications and packages
notify "Installing applications and packages"

if [ -f $HOME/.brew.bundles ]; then
  . $HOME/.brew.bundles
fi

# Git
brew_ensure git ghi

# Deps
brew_ensure gnu-sed pidof
brew_ensure automake autoconf curl pcre re2c mhash libtool icu4c gettext jpeg libxml2 mcrypt gmp libevent
# brew_ensure homebrew/dupes/zlib
if ! hash /usr/local/bin/icuinfo 2>/dev/null; then
  brew link icu4c
fi

# SSL
#if [[ -z $(brew list openssl 2>/dev/null) ]]; then
#  notify "Installing openssl"
#  brew install openssl
#  brew unlink openssl && brew link openssl --force
#else
#  brew_ensure openssl
#fi

# Vim
if [[ -z $(brew list vim 2>/dev/null) ]]; then
  notify "Installing Vim"
  brew install vim --with-lua --override-system-vi
else
  brew_ensure vim
fi

# Neovim
if [[ -z $(brew list neovim 2>/dev/null) ]]; then
  notify "Installing Neovim"
  brew install neovim/neovim/neovim
else
  brew_ensure neovim/neovim/neovim
fi

# Vim Utilities
brew_ensure ripgrep fzf

# Tmux
brew_ensure tmux reattach-to-user-namespace

# MariaDB
if [[ -z $(brew list mariadb 2>/dev/null) ]]; then
  brew_ensure mariadb
  unset TMPDIR
  mysql_install_db --user=`whoami` --basedir="$(brew --prefix mariadb)" --datadir=/usr/local/var/mysql --tmpdir=/tmp
else
  brew_ensure mariadb
fi

# PostgreSQL
brew_ensure postgresql

# MongoDB
# brew_ensure mongodb

# Redis
# brew_ensure redis

# Ruby
brew_ensure rbenv ruby-build

# Use thoughtbot's ruby version
# ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"
# if [[ -z $(rbenv versions | grep $ruby_version) ]]; then
#   notify "Setting up Ruby $ruby_version"
#   rbenv install -s "$ruby_version"
#   rbenv global "$ruby_version"
#   rbenv rehash
#   gem install bundler capistrano-ext curses
# fi

# PHP
# if [[ -z $(brew list php55 2>/dev/null) ]]; then
#   notify "Setting up PHP 5.5"
#   brew install homebrew/php/php55 --with-homebrew-openssl --without-snmp
# else
#   brew_ensure php55
# fi

# brew_ensure php55-redis php55-mongo composer

# Node.js
brew_ensure yarn

# Go-lang
brew_ensure go

# Python
brew_ensure python python3
pip3 install --user neovim

# Utils
brew_ensure grc htop-osx

# AWS
brew_ensure awscli

# Heroku
# brew_ensure heroku-toolbelt

# Pin certain brews that we don't want to upgrade
if [[ -z $(brew info mariadb | grep pinned 2>/dev/null) ]]; then brew pin mariadb; fi
if [[ -z $(brew info postgresql | grep pinned 2>/dev/null) ]]; then brew pin postgresql; fi

notify "Loading OSX defaults"
$PWD/bin/osx-defaults

notify "ðŸ‘Œ  All done!"
